//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::{ActiveValue::Set, entity::prelude::*, sqlx::types::chrono::Utc};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub username: String,
    pub password: String,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
    pub deleted_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait::async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_delete<C>(self, db: &C) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        let mut updated_model = self;
        updated_model.deleted_at = Set(Some(Utc::now()));
        Entity::update(updated_model.clone())
            .filter(Column::Id.eq(updated_model.id.clone().unwrap())) // 过滤条件，确保只更新当前记录
            .exec(db)
            .await?;

        Ok(updated_model)
    }
}
